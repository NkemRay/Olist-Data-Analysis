---1; What is the total revenue generated by Olist
--.and how has it change over time

WITH dates AS (
    SELECT 
        order_id, 
        order_purchase_date, 
		YEAR(order_purchase_date) AS years,
        MONTH(order_purchase_date) AS months
    FROM orders 
)
SELECT
    months, years,
   
    CONCAT('$', ROUND(SUM(payment_value) / 1000,0), 'k') AS total_revenue,
    ROUND(SUM(payment_value) / 1000,0) - LAG(ROUND(SUM(payment_value) / 1000, 0)) 
	OVER (ORDER BY DATEADD(MONTH, DATEDIFF(MONTH, 0, order_purchase_date), 0)) AS revenue_difference
FROM
    [order payment] AS a
JOIN
    dates AS b ON a.order_id = b.order_id
GROUP BY
    months, DATEADD(MONTH, DATEDIFF(MONTH, 0, order_purchase_date), 0), months, years
ORDER BY
    DATEADD(MONTH, DATEDIFF(MONTH, 0, order_purchase_date), 0);

---2, How many orders were placed on the Olist 
---and how does this vary by month

SELECT
    DATEPART(MONTH, order_purchase_date) AS order_month,
    COUNT(*) AS order_count
FROM
    orders
GROUP BY
    DATEPART(MONTH, order_purchase_date)
ORDER BY
    DATEPART(MONTH, order_purchase_date)

---3; What are the most popular product categories on Olist,
---and how do their sales volumes compare to each other

SELECT a.product_category_name,
   COUNT(DISTINCT b.order_id) AS order_count,
    SUM(price*order_item_id) AS total_sales 
FROM
    product a
JOIN
    [order item] b 
ON 
   b.product_id = a.product_id
GROUP BY
    a.product_category_name
ORDER BY
   SUM(price*order_item_id)  DESC;


---4; What is the average order value(AOV) on Olist, 
---and how does this number change over time?

SELECT
      ROUND(AVG(payment_value), 2) as AOV, MONTH(order_purchase_date) AS months
FROM
    orders 
JOIN
     [order payment]
ON 
   [order payment].order_id = orders.order_id
GROUP BY
    MONTH(order_purchase_date) 

---5; How many sellers are active on Olist, and how does this vary by payment method

SELECT 
      COUNT(DISTINCT seller_id) AS active_seller,
     payment_type
FROM
    [order item]
JOIN
     [order payment] 
ON 
   [order item].order_id =[order payment].order_id
GROUP BY 
        payment_type
ORDER BY  count(DISTINCT seller_id) DESC

---6; What is the distribution of seller ratings on Olist,
--- and how does this impact sales performance 

SELECT
    SUM(b.price * b.order_item_id) AS sales,
    COUNT(DISTINCT a.order_id) AS order_count,
    a.review_score,
    COUNT(*) AS review_count
FROM
    [order review] AS a
JOIN
    [order item] AS b ON a.order_id = b.order_id
GROUP BY
    a.review_score
ORDER BY
    review_count DESC,
    sales DESC;


	--- To create sales colum
ALTER TABLE [order item]
ADD sales AS (price * order_item_id);


---7; How many customers have made repeat purchases on Olist,
---- and what percentage of total sales do they account for?

WITH repeat_customers AS (
    SELECT
        customer_id, order_id
        COUNT(DISTINCT order_id) AS order_count
    FROM
        orders
    WHERE
        order_status = 'delivered' -- Consider only delivered orders
    GROUP BY
        customer_id, order_id
    HAVING
        COUNT(DISTINCT order_id) > 1 -- Filter for customers with more than one order
)
SELECT
    COUNT(*) AS repeat_customer_count,
   sum(sales) / (SELECT SUM(sales) FROM [order item])*100 AS sales_percentage
FROM
    [order item]
JOIN 
    repeat_customers
ON
   [order item].order_id = repeat_customers.order_id


---8; What is the average customer rating for product sold on Olist,
--- and how dose this impact sales performance?

SELECT 
     AVG(review_score) AS average_rating, 
	 COUNT(*) AS total_sales
FROM 
    [order review] AS reviews
JOIN 
    [order item] AS order_items 
ON 
    reviews.order_id = order_items.order_id


--9; What is the average order cancellation rate on Olist,
--- and how does this impact seller performance.
SELECT 
    AVG(CASE WHEN order_status = 'canceled' THEN 1 ELSE 0 END) AS average_cancellation_rate,
    seller_id,
    COUNT(*) AS total_orders
FROM 
    orders

JOIN 
    [order item]
ON 
   [order item].order_id = orders.order_id

GROUP BY
    seller_id
	
---10; What are the top selling products on OList,
--- and how have their sales trends changed over time?


SELECT
   
    p.product_category_name,
    COUNT(oi.order_id) AS total_orders,
    MONTH(oo.order_purchase_date) AS months
FROM
    product AS p
JOIN
    [order item] AS oi ON p.product_id = oi.product_id
JOIN
    orders AS oo ON oi.order_id = oo.order_id
GROUP BY
    
    p.product_category_name,
	MONTH(oo.order_purchase_date) 
ORDER BY
    total_orders DESC,
	months

---11; which payment methods are most commonly used by olist custmers, 
--- and how dose this vary by product category.
SELECT 
     TOP 10 p.product_category_name, 
	 op.payment_type, 
	 COUNT(*) AS frequency
FROM
     [order payment] op
JOIN 
    orders o 
ON 
    op.order_id = o.order_id
JOIN 
     [order item] oi 
ON 
    o.order_id = oi.order_id
JOIN
     product p
ON 
   oi.product_id = p.product_id
JOIN
    product_category_name_translati$ c 
ON
   p.product_category_name = c.product_category_name_english
GROUP BY 
   p.product_category_name, op.payment_type
ORDER BY 
     frequency DESC;

--12;How do customer reviews and ratings affect sales
---and product performance on Olist

SELECT 
    b.product_category_name,
    AVG(o.review_score) AS average_review_score, 
    COUNT(oi.order_item_id) AS total_items_sold,
       COUNT(CASE WHEN o.review_score >= 4 THEN 1 END) AS positive_reviews,
       COUNT(CASE WHEN o.review_score < 3 THEN 1 END) AS negative_reviews,
	   COUNT(CASE WHEN o.review_score = 3 THEN 1 END) AS neutral_reviews
FROM 
    [order item] oi
JOIN
     [order review] o
ON 
   oi.order_id = o.order_id
JOIN 
product b
 on oi.product_id = b.product_id
 WHERE b.product_category_name is not null
GROUP BY 
    b.product_category_name;

---13; Which product categories have the highest profit margins on Olist
--- and how can the company increase profitability across different categories?

SELECT
  p.product_category_name,
  ROUND((SUM(op.payment_value) - SUM(oi.price + oi.freight_value)) / SUM(op.payment_value) * 100, 1) AS profit_margin
FROM
  [order item] oi
JOIN 
    product p 
ON 
    oi.product_id = p.product_id
JOIN 
    [order payment] op 
ON 
    oi.order_id = op.order_id
WHERE
    product_category_name is not null
GROUP BY
       p.product_category_name
ORDER BY 
       profit_margin DESC
  
---15; Geolocation having high customer density.
---Calculate customer retention rate according to geolocations


SELECT
  c.customer_state,
  COUNT(DISTINCT o.customer_id) AS total_customers
 
FROM
 orders AS o
JOIN
  customer_data AS c ON o.customer_id = c.customer_id
GROUP BY
  c.customer_state;